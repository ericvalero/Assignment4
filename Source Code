#include <iostream>
#include <time.h>
#include <stdlib.h>
#include <cmath>


using namespace std;

//Function to print out any array of numbers
void printArray(int* arr, int size);

//Function that creates a copy of an array to allow us to have a backup for sorting purposes
int* createCopy(int* arr, int size);

//Function that sorts an array using the bubble sort method
int* bubbleSort(int* arr, int size);

//Function that sorts an array using the insertion sort method
int* insertionSort(int* arr, int size);

//Function that sorts an array using the merge sort method
int* mergeSort(int* input, int p, int r);

//Function that merges two arrays together, used in part of the merge sort sorting method
void merge(int* input, int p, int r);

//Function that sorts an array using the quicksort sorting method
void quickSort(int* arr, int left, int right);

//Funciton that verifies that an array is sorted in ascending order
bool verifySorted(int* arr, int size);

//Function to display the user menu
void printDisplay();

int main()
{
	

	int startTime = 0, endTime = 0, elapsedTime = 0;
	bool looping = true;
	char input;
	srand(time(NULL));
	int* test = new int[100000];
	int* insertSorted = new int[100000];
	for (int i = 0; i < 100000; i++)
	{
		int randomNumber = rand() % 30000 + 1;
		test[i] = randomNumber;
	}
	while (looping)
	{
		printDisplay();
		cin >> input;
		input = toupper(input);
		switch (input)
		{
			
			case 'B': 
				cout << "Executing bubble sort" << endl;	
				break;

			case 'I':
				startTime = clock();
				cout << "Executing insert sort" << endl;
				insertSorted = insertionSort(test, 100000);
				if (verifySorted(insertSorted, 100000))
				{
					cout << "IT WORKED" << endl;
				}
				endTime = clock();
				elapsedTime = endTime - startTime;
				cout << "This insert sort took " << elapsedTime << " tics..." << endl;
				//resultArray[0] = elapsedTime;
				//resultArray[1] = elapsedTime;
				//resultArray[2] = elapsedTime;
				break;

			case 'M': 
				cout << "Executing merge sort" << endl;
				break;

			case 'Q': 
				cout << "Executing quick sort" << endl;
				break;

			case 'E': 
				cout << "Exiting program..." << endl;
				looping = false;
				break;

			default: cout << "Incorrect input please try again..." << endl;
		}
	}
	
	
	/*
	int* myArray = new int[10];
	for (int i = 0; i < 10; i++)
	{
		int randomNumber = rand() % 100 + 1;
		myArray[i] = randomNumber;
	}

	printArray(myArray, 10);
	cout << endl;
	cout << verifySorted(myArray, 10);
	cout << endl;

	int* test1 = createCopy(myArray, 10);
	int* test2 = createCopy(myArray, 10);
	int* test3 = createCopy(myArray, 10);
	int* test4 = createCopy(myArray, 10);
	
	int* bubbleSorted = bubbleSort(test1, 10);
	printArray(bubbleSorted, 10);

	cout << endl;
	cout << verifySorted(bubbleSorted, 10);
	cout << endl;

	int* insertSorted = insertionSort(test2, 10);
	printArray(insertSorted, 10);

	cout << endl;

	int* mergeSorted = mergeSort(test3, 0, 9);
	printArray(mergeSorted, 10);

	cout << endl;

	quickSort(test4, 0, 9);
	printArray(test4, 10);

	cout << endl;
	printArray(myArray, 10);
	*/
	
	cout << "This program reached conclusion after " << elapsedTime << " tics of the clock..." << endl;

	return 0;
}

void printDisplay()
{
	cout << "Choose two sorts you wish to compare:" << endl;
	cout << "B = Bubble Sort" << endl;
	cout << "I = Insertion Sort" << endl;
	cout << "M = Merge Sort" << endl;
	cout << "Q = Quick Sort" << endl;
	cout << "E = Exit program" << endl;
}

void printArray(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << endl;
	}
}

int* bubbleSort(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		for (int j = i + 1; j < size; j++)
		{
			if (arr[j] < arr[i])
			{
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
		}
	}

	return arr;

}

int* insertionSort(int* arr, int size)
{
	int i, j, temp;
	for (i = 1; i<size; i++)
	{
		temp = arr[i];
		j = i - 1;
		while (temp<arr[j] && j >= 0)
		{
			arr[j + 1] = arr[j];
			--j;
		}
		arr[j + 1] = temp;
	}
	return arr;
}

int* createCopy(int* arr, int size)
{
	int* newArray = new int[size];
	for (int i = 0; i < size; i++)
	{
		newArray[i] = arr[i];
	}

	return newArray;

}


void merge(int* input, int p, int r)
{
	int mid = floor((p + r) / 2);
	int i1 = 0;
	int i2 = p;
	int i3 = mid + 1;

	// Temp array
	int* temp = new int[r - p + 1];

	// Merge in sorted form the 2 arrays
	while (i2 <= mid && i3 <= r)
		if (input[i2] < input[i3])
			temp[i1++] = input[i2++];
		else
			temp[i1++] = input[i3++];

	// Merge the remaining elements in left array
	while (i2 <= mid)
		temp[i1++] = input[i2++];

	// Merge the remaining elements in right array
	while (i3 <= r)
		temp[i1++] = input[i3++];

	// Move from temp array to master array
	for (int i = p; i <= r; i++)
		input[i] = temp[i - p];
}

int* mergeSort(int* input, int p, int r)
{
	if (p < r)
	{
		int mid = floor((p + r) / 2);
		mergeSort(input, p, mid);
		mergeSort(input, mid + 1, r);
		merge(input, p, r);
	}

	return input;
}

void quickSort(int* arr, int left, int right) 
{

	int i = left, j = right;

	int tmp;

	int pivot = arr[(left + right) / 2];



	/* partition */

	while (i <= j) {

		while (arr[i] < pivot)

			i++;

		while (arr[j] > pivot)

			j--;

		if (i <= j) {

			tmp = arr[i];

			arr[i] = arr[j];

			arr[j] = tmp;

			i++;

			j--;

		}

	};



	/* recursion */

	if (left < j)

		quickSort(arr, left, j);

	if (i < right)

		quickSort(arr, i, right);

}

bool verifySorted(int* arr, int size)
{
	bool sorted = true;
	for (int i = 0; i < size; i++)
	{
		if (i == size - 1)
		{
			sorted = true;
			return sorted;
		}
		if (arr[i]>arr[i + 1])
		{
			sorted = false;
			return sorted;
		}
	}

	return sorted;
}
